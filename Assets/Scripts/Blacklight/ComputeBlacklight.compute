#pragma kernel CSMain

RWTexture2D<float4> mask;   //texture that is being generated
float2 deltaPos;            //relative position of light to the hiddenSprite
float width;                //width of the texture
float height;               //height of the texture
float radius;               //radius of the light

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float x = id.x;                                                     //convert the x value to a float 
    float y = id.y;                                                     //convert the y value to a float

    float reCenterX = x-width/2;                                        //convert x to center based
    float reCenterY = y-height/2;                                       //convert y to center based

    float2 pixelPos = float2((reCenterX)/width, (reCenterY)/height);    //convert pixels to be relative to sprite position
    pixelPos = pixelPos - deltaPos;                                     //subtract the relative position of the light from the pixel
    float sqrMagnitude = pow(pixelPos.x, 2) + pow(pixelPos.y, 2);       //find the square magnitude of pixelPos (squared length)
    float c = 1 - clamp(sqrMagnitude/pow(radius, 2), 0, 1);             //divide the square magnitude by the radius squared to get a nice gradient | clamp it between 0 and 1 | then invert it

    mask[id.xy] = float4(c, c, c, 0);                                   //set all color values to the same color to get a white-black gradient
}